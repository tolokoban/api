import ExpressFactory, { Express } from "express"
//{{IMPORTS}}

const UNEXPECTED_ERROR = -1

export interface ApiContext<Errors> {
    token: string
    fatal(code: Errors): never
}

type ApiHandler<Params, Result, Errors> = (
    params: Params,
    context: ApiContext<Errors>
) => Promise<Result>

export interface ApiOptions {
    validateToken(token: string): Promise<boolean>
    logError(...params: unknown[]): void
    logInfo(...params: unknown[]): void
}

export default class Api {
    private readonly options: ApiOptions

    //{{HANDLERS}}

    constructor(private readonly app: Express, options: Partial<ApiOptions>) {
        this.options = {
            validateToken: () => {
                return new Promise(resolve => {
                    this.options.logError(
                        "Function validateToken() has not been defined!"
                    )
                    resolve(false)
                })
            },
            logError: console.error,
            logInfo: console.info,
            ...options,
        }
        app.use(ExpressFactory.json())
        //{{ROUTES}}
    }

    private post<Params, Result, Errors>(
        route: string,
        isType: (data: unknown) => data is Params,
        action: ApiHandler<Params, Result, Errors>,
        secure: boolean
    ) {
        console.log("Register route:", route)
        this.app.post(route, async (req, res) => {
            console.log(">>", route, limit(req.body))
            const BEARER = "Bearer "
            let token = req.header("Authorization") ?? ""
            if (token.startsWith(BEARER)) {
                token = token.substring(BEARER.length).trim()
            }
            if (secure) {
                const isValidToken = await this.options.validateToken(token)
                if (!isValidToken) {
                    this.options.logError(
                        `Attempt to access "${route}" with invalid token:`,
                        JSON.stringify(token)
                    )
                    res.status(401).json(0)
                    return
                }
            }
            const params: Record<string, unknown> = req.body
            if (isType(params)) {
                try {
                    const result = await action(
                        {
                            ...params,
                            $token: token,
                        },
                        {
                            token,
                            fatal: (c: Errors) => {
                                this.options.logError(
                                    `Error in "${route}":`,
                                    lookupError(route, c as number)
                                )
                                throw { code: c }
                            },
                        }
                    )
                    res.status(200).json(result)
                    return
                } catch (ex) {
                    if (ex instanceof Error) {
                        this.options.logError(
                            `Unexpected error in route "${route}":`,
                            ex
                        )
                        res.status(500).json({
                            code: UNEXPECTED_ERROR,
                            detail: ex.message,
                        })
                    } else if (
                        ex &&
                        typeof ex === "object" &&
                        "code" in ex &&
                        typeof ex.code === "number"
                    ) {
                        res.status(500).json(ex)
                    } else {
                        res.status(500).json({
                            code: UNEXPECTED_ERROR,
                            detail: JSON.stringify(ex),
                        })
                    }
                }
                return
            }
            // Invalid params.
            this.options.logError(
                `### Invalid params for route "${route}":`,
                params
            )
            res.status(400).json(0)
        })
    }
}

//{{TYPES}}

//{{TYPE_GUARDS}}

const ERRORS: { [route: string]: string[] } = {
    //{{ERRORS}}
}

function lookupError(route: string, code: number): string {
    if (route.charAt(0) === "/") route = route.substring(1)
    const errorNames = ERRORS[route]
    if (!errorNames) return `Unknown route, error #${code}`

    return errorNames[code] ?? `#${code}`
}

function limit(data: unknown): string {
    const LIMIT = 60
    const txt = JSON.stringify(data)
    if (txt.length < LIMIT) return txt

    return `${txt.substring(0, LIMIT - 3)}...`
}
